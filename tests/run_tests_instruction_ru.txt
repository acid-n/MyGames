Инструкции по запуску тестов для проекта "Alien Invasion"
=========================================================

Для запуска автоматизированных тестов, написанных с использованием фреймворка `unittest` Python, выполните следующие шаги:

1.  **Убедитесь, что вы находитесь в корневой директории проекта.**
    Это директория, которая содержит поддиректорию `alien_invasion/` и `tests/`.

2.  **Откройте терминал или командную строку** в этой директории.

3.  **Выполните команду для запуска тестов:**

    Для автоматического обнаружения и запуска всех тестов в директории `tests/` (и ее поддиректориях), используйте следующую команду (рекомендуемый способ):

    ```bash
    python -m unittest discover tests
    ```

    Или, если вы хотите указать конкретный файл с тестами:

    ```bash
    python -m unittest tests.test_game_logic
    ```

    Аналогично, для запуска тестов только из нового файла с интеграционными тестами и тестами состояний:
    ```bash
    python -m unittest tests.test_integration_and_state
    ```

    (Замените `tests.test_game_logic` или `tests.test_integration_and_state` на актуальный путь к файлу, если он изменится).

    Для более подробного вывода (verbose), добавьте флаг `-v` к любой из команд:

    ```bash
    python -m unittest discover tests -v
    ```
    ```bash
    python -m unittest tests.test_game_logic -v
    ```

4.  **Интерпретация результатов:**
    *   Если все тесты пройдены успешно, вы увидите сообщение вида `OK` или информацию о количестве пройденных тестов.
    *   Если какие-либо тесты не пройдены (failed) или завершились с ошибкой (error), `unittest` выведет подробную информацию о каждом таком случае, включая трассировку стека (stack trace) и сообщения об ошибках утверждений (assertion errors). Это поможет вам определить причину проблемы.

**Возможные проблемы и их решения:**

*   **`ModuleNotFoundError` или `ImportError`:**
    *   Убедитесь, что вы запускаете команду из корневой директории проекта.
    *   Проверьте, что структура директорий проекта (`alien_invasion/`, `tests/`) не нарушена.
    *   Файлы тестов содержат строки для добавления корневой директории проекта в `sys.path`. Это должно помочь с импортами игровых модулей. Если проблемы все еще возникают, возможно, потребуется настройка переменной окружения `PYTHONPATH` так, чтобы она включала корневую директорию проекта, хотя это не должно быть необходимо при использовании `python -m unittest discover`.

*   **Ошибки, связанные с Pygame (если мокирование неполное или некорректное):**
    *   Тесты спроектированы так, чтобы минимизировать зависимость от полной инициализации Pygame путем использования мок-объектов. Если вы видите ошибки типа `pygame.error: No video mode has been set` или подобные, это может указывать на то, что какая-то часть Pygame, не покрытая моками, пытается инициализироваться. Проверьте код тестов и убедитесь, что все необходимые вызовы Pygame замоканы.

**Важное примечание по выполнению тестов в некоторых средах:**
На момент последнего обновления этой инструкции (2024-07-30), наблюдаются значительные проблемы с производительностью при попытке запуска тестов в некоторых ограниченных средах выполнения (например, в определенных облачных песочницах). Это может приводить к тайм-аутам выполнения даже для самых простых тестов, не позволяя получить фактический результат их прохождения.
Тестовый набор был расширен (включая новый файл `tests/test_integration_and_state.py`) и предназначен для проверки логики игры с минимизацией зависимостей от полной инициализации Pygame, где это возможно. Для надежной проверки рекомендуется запускать тесты в локальном окружении разработчика с установленным Python и Pygame.
